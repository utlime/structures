{"version":3,"file":"index.iife.min.js","sources":["../src/BinaryTree.ts","../src/BinaryHeap.ts","../src/MinHeap.ts","../src/MaxHeap.ts"],"sourcesContent":["export class BinaryTree<T> {\n  private readonly storage: T[] = [];\n\n  push(value: T) {\n    this.storage.push(value);\n  }\n\n  pop(): T | undefined {\n    return this.storage.pop();\n  }\n\n  swap(a: number, b: number) {\n    [this.storage[a], this.storage[b]] = [this.storage[b], this.storage[a]];\n  }\n\n  value(position: number): T | undefined {\n    return this.storage[position];\n  }\n\n  parent(position: number): number | undefined {\n    const parent = Math.floor((position - 1) / 2);\n    return this.exists(parent) ? parent : undefined;\n  }\n\n  left(position: number): number | undefined {\n    const left = 2 * position + 1;\n    return this.exists(left) ? left : undefined;\n  }\n\n  right(position: number): number | undefined {\n    const right = 2 * position + 2;\n    return this.exists(right) ? right : undefined;\n  }\n\n  root(): number | undefined {\n    return this.storage.length > 0 ? 0 : undefined;\n  }\n\n  tail(): number | undefined {\n    return this.storage.length > 0 ? this.storage.length - 1 : undefined;\n  }\n\n  exists(a: number): boolean {\n    return a >= 0 && a < this.storage.length;\n  }\n}\n","import { BinaryTree } from './BinaryTree';\nimport { IHeap } from './IHeap';\n\ntype PriorityItem<T> = Readonly<{ item: T; priority: number }>;\n\ntype isAGreaterOrEqualB<T> = (a: T, b: T) => boolean;\n\nexport class BinaryHeap<T> implements IHeap<T> {\n  private readonly storage: BinaryTree<PriorityItem<T>> = new BinaryTree();\n\n  private readonly comparator: isAGreaterOrEqualB<PriorityItem<T>>;\n\n  constructor(comparator?: isAGreaterOrEqualB<PriorityItem<T>>) {\n    this.comparator = comparator != null ? comparator : ({ priority: a }, { priority: b }) => a >= b;\n  }\n\n  extract(): T | undefined {\n    const root = this.storage.root();\n    const tail = this.storage.tail();\n\n    if (root != null && tail != null) {\n      this.storage.swap(root, tail);\n    }\n\n    const item = this.storage.pop();\n\n    let position = this.storage.root();\n    while (position != null) {\n      const left = this.storage.left(position);\n      const right = this.storage.right(position);\n      let next;\n\n      if (right != null && left != null && !this.compare(left, right)) {\n        next = right;\n      } else if (left != null) {\n        next = left;\n      }\n\n      if (next != null && !this.compare(position, next)) {\n        this.storage.swap(position, next);\n        position = next;\n      } else {\n        position = undefined;\n      }\n    }\n\n    return item != null ? item.item : undefined;\n  }\n\n  insert(item: T, priority: number): void {\n    this.storage.push({ item, priority });\n\n    let position = <number>this.storage.tail();\n    let parent = this.storage.parent(position);\n\n    while (parent != null && !this.compare(parent, position)) {\n      this.storage.swap(position, parent);\n      position = parent;\n      parent = this.storage.parent(position);\n    }\n  }\n\n  private compare(a: number, b: number) {\n    return this.comparator(<PriorityItem<T>>this.storage.value(a), <PriorityItem<T>>this.storage.value(b));\n  }\n}\n","import { BinaryHeap } from './BinaryHeap';\nimport { IHeap } from './IHeap';\n\nexport class MinHeap<T> implements IHeap<T> {\n  private readonly heap: BinaryHeap<T>;\n\n  constructor() {\n    this.heap = new BinaryHeap(({ priority: a }, { priority: b }) => a <= b);\n  }\n\n  insert(item: T, priority: number) {\n    this.heap.insert(item, priority);\n  }\n\n  extract(): T | undefined {\n    return this.heap.extract();\n  }\n}\n","import { BinaryHeap } from './BinaryHeap';\nimport { IHeap } from './IHeap';\n\nexport class MaxHeap<T> implements IHeap<T> {\n  private readonly heap: BinaryHeap<T>;\n\n  constructor() {\n    this.heap = new BinaryHeap();\n  }\n\n  insert(item: T, priority: number) {\n    this.heap.insert(item, priority);\n  }\n\n  extract(): T | undefined {\n    return this.heap.extract();\n  }\n}\n"],"names":["this","BinaryTree","value","storage","push","pop","a","b","_a","position","parent","Math","floor","exists","undefined","left","right","length","comparator","_b","BinaryHeap","root","tail","swap","item","next","compare","priority","heap","MinHeap","insert","extract","MaxHeap"],"mappings":"wCAAA,iBAAA,aACmBA,aAAe,GA4ClC,OA1CEC,iBAAA,SAAKC,GACHF,KAAKG,QAAQC,KAAKF,IAGpBD,gBAAA,WACE,OAAOD,KAAKG,QAAQE,OAGtBJ,iBAAA,SAAKK,EAAWC,SACdC,oCAACR,qBAAiBA,sBAGpBC,kBAAA,SAAMQ,GACJ,OAAOT,KAAKG,QAAQM,IAGtBR,mBAAA,SAAOQ,GACL,IAAMC,EAASC,KAAKC,OAAOH,EAAW,GAAK,GAC3C,OAAOT,KAAKa,OAAOH,GAAUA,OAASI,GAGxCb,iBAAA,SAAKQ,GACH,IAAMM,EAAO,EAAIN,EAAW,EAC5B,OAAOT,KAAKa,OAAOE,GAAQA,OAAOD,GAGpCb,kBAAA,SAAMQ,GACJ,IAAMO,EAAQ,EAAIP,EAAW,EAC7B,OAAOT,KAAKa,OAAOG,GAASA,OAAQF,GAGtCb,iBAAA,WACE,OAAOD,KAAKG,QAAQc,OAAS,EAAI,OAAIH,GAGvCb,iBAAA,WACE,OAAOD,KAAKG,QAAQc,OAAS,EAAIjB,KAAKG,QAAQc,OAAS,OAAIH,GAG7Db,mBAAA,SAAOK,GACL,OAAOA,GAAK,GAAKA,EAAIN,KAAKG,QAAQc,0BC/BpC,WAAYC,GAJKlB,aAAuC,IAAIC,EAK1DD,KAAKkB,WAA2B,MAAdA,EAAqBA,EAAa,SAACV,EAAiBW,GAAoB,+BAoD9F,OAjDEC,oBAAA,WACE,IAAMC,EAAOrB,KAAKG,QAAQkB,OACpBC,EAAOtB,KAAKG,QAAQmB,OAEd,MAARD,GAAwB,MAARC,GAClBtB,KAAKG,QAAQoB,KAAKF,EAAMC,GAM1B,IAHA,IAAME,EAAOxB,KAAKG,QAAQE,MAEtBI,EAAWT,KAAKG,QAAQkB,OACT,MAAZZ,GAAkB,CACvB,IAAMM,EAAOf,KAAKG,QAAQY,KAAKN,GACzBO,EAAQhB,KAAKG,QAAQa,MAAMP,GAC7BgB,SAES,MAATT,GAAyB,MAARD,GAAiBf,KAAK0B,QAAQX,EAAMC,GAEtC,MAARD,IACTU,EAAOV,GAFPU,EAAOT,EAKG,MAARS,GAAiBzB,KAAK0B,QAAQjB,EAAUgB,GAI1ChB,OAAWK,GAHXd,KAAKG,QAAQoB,KAAKd,EAAUgB,GAC5BhB,EAAWgB,GAMf,OAAe,MAARD,EAAeA,EAAKA,UAAOV,GAGpCM,mBAAA,SAAOI,EAASG,GACd3B,KAAKG,QAAQC,KAAK,CAAEoB,OAAMG,aAK1B,IAHA,IAAIlB,EAAmBT,KAAKG,QAAQmB,OAChCZ,EAASV,KAAKG,QAAQO,OAAOD,GAEhB,MAAVC,IAAmBV,KAAK0B,QAAQhB,EAAQD,IAC7CT,KAAKG,QAAQoB,KAAKd,EAAUC,GAC5BD,EAAWC,EACXA,EAASV,KAAKG,QAAQO,OAAOD,IAIzBW,oBAAR,SAAgBd,EAAWC,GACzB,OAAOP,KAAKkB,WAA4BlB,KAAKG,QAAQD,MAAMI,GAAqBN,KAAKG,QAAQD,MAAMK,uBCzDrG,aACEP,KAAK4B,KAAO,IAAIR,EAAW,SAACZ,EAAiBW,GAAoB,gCAUrE,OAPEU,mBAAA,SAAOL,EAASG,GACd3B,KAAK4B,KAAKE,OAAON,EAAMG,IAGzBE,oBAAA,WACE,OAAO7B,KAAK4B,KAAKG,6BCTnB,aACE/B,KAAK4B,KAAO,IAAIR,EAUpB,OAPEY,mBAAA,SAAOR,EAASG,GACd3B,KAAK4B,KAAKE,OAAON,EAAMG,IAGzBK,oBAAA,WACE,OAAOhC,KAAK4B,KAAKG"}