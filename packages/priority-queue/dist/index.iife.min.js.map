{"version":3,"file":"index.iife.min.js","sources":["../src/PriorityQueue.ts"],"sourcesContent":["import { BinaryHeap } from '@utlime/heap';\nimport { IPriorityQueue } from './IPriorityQueue';\n\nexport class PriorityQueue<T> implements IPriorityQueue<T> {\n  private heap: BinaryHeap<{ queueItem: T; order: number }>;\n\n  private counter: number = 0;\n\n  constructor(min: boolean = false) {\n    this.heap = new BinaryHeap(({ priority: priorityA, item: itemA }, { priority: priorityB, item: itemB }) => {\n      if (priorityA != priorityB) {\n        if (min) {\n          return priorityA < priorityB;\n        }\n\n        return priorityA > priorityB;\n      }\n\n      return itemA.order < itemB.order;\n    });\n  }\n\n  dequeue(): T | undefined {\n    const item = this.heap.extract();\n\n    if (item != null) {\n      return item.queueItem;\n    }\n\n    return undefined;\n  }\n\n  enqueue(queueItem: T, priority: number) {\n    this.heap.insert({ queueItem, order: this.counter++ }, priority);\n  }\n}\n"],"names":["min","this","heap","BinaryHeap","_a","_b","priorityA","itemA","priorityB","itemB","order","PriorityQueue","item","extract","queueItem","priority","insert","counter"],"mappings":"oEAQE,WAAYA,gBAAAA,MAFJC,aAAkB,EAGxBA,KAAKC,KAAO,IAAIC,aAAW,SAACC,EAAsCC,OAApCC,aAAqBC,SAAiBC,aAAqBC,SACvF,OAAIH,GAAaE,EACXR,EACKM,EAAYE,EAGdF,EAAYE,EAGdD,EAAMG,MAAQD,EAAMC,QAiBjC,OAbEC,oBAAA,WACE,IAAMC,EAAOX,KAAKC,KAAKW,UAEvB,GAAY,MAARD,EACF,OAAOA,EAAKE,WAMhBH,oBAAA,SAAQG,EAAcC,GACpBd,KAAKC,KAAKc,OAAO,CAAEF,YAAWJ,MAAOT,KAAKgB,WAAaF"}