{"version":3,"file":"index.iife.min.js","sources":["../src/PriorityQueue.ts"],"sourcesContent":["import { BinaryHeap } from '@utlime/heap';\nimport { IPriorityQueue } from './IPriorityQueue';\n\nexport class PriorityQueue<T> implements IPriorityQueue<T> {\n  private heap: BinaryHeap<{ queueItem: T; order: number }>;\n\n  private counter: number = 0;\n\n  constructor(min: boolean = false) {\n    this.heap = new BinaryHeap(({ priority: priorityA, item: itemA }, { priority: priorityB, item: itemB }) => {\n      if (priorityA != priorityB) {\n        if (min) {\n          return priorityA < priorityB;\n        }\n\n        return priorityA > priorityB;\n      }\n\n      return itemA.order < itemB.order;\n    });\n  }\n\n  dequeue(): T | undefined {\n    const item = this.heap.extract();\n\n    if (item != null) {\n      return item.queueItem;\n    }\n\n    return undefined;\n  }\n\n  enqueue(queueItem: T, priority: number) {\n    this.heap.insert({ queueItem, order: this.counter++ }, priority);\n  }\n}\n"],"names":["[object Object]","min","this","heap","BinaryHeap","priority","priorityA","item","itemA","priorityB","itemB","order","extract","queueItem","insert","counter"],"mappings":"gFAQEA,YAAYC,GAAe,GAFnBC,aAAkB,EAGxBA,KAAKC,KAAO,IAAIC,aAAW,EAAGC,SAAUC,EAAWC,KAAMC,IAAWH,SAAUI,EAAWF,KAAMG,KACzFJ,GAAaG,EACXR,EACKK,EAAYG,EAGdH,EAAYG,EAGdD,EAAMG,MAAQD,EAAMC,OAI/BX,UACE,MAAMO,EAAOL,KAAKC,KAAKS,UAEvB,GAAY,MAARL,EACF,OAAOA,EAAKM,UAMhBb,QAAQa,EAAcR,GACpBH,KAAKC,KAAKW,OAAO,CAAED,UAAAA,EAAWF,MAAOT,KAAKa,WAAaV"}